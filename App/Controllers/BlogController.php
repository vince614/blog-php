<?php
namespace App\Controllers;

use App\App;
use App\Entity\PostEntity;
use App\Models\PostModel;
use App\Models\UserModel;
use App_Core_Exception;
use Core\Controllers\Controller;
use Core\Utils\Ajax;
use Core\Utils\Request;

/**
 * Class BlogController
 * @package App\Controllers
 */
class BlogController extends Controller
{

    const ADD_NEW_POST_ROUTE = "new";
    const NEW_POST_REQUEST_TYPE = "create";

    /**
     * @var Request
     */
    protected $request;

    /**
     * @var PostModel
     */
    protected $postModel;

    /**
     * @var UserModel
     */
    protected $userModel;

    /**
     * @var PostEntity[]
     */
    public $articles;

    /**
     * @var PostEntity
     */
    public $article;

    /**
     * @var string
     */
    public $articleUrlKey;

    /**
     * @var bool
     */
    public $articleForm = false;

    /**
     * BlogController constructor.
     *
     * @param $path
     * @param null $params
     */
    public function __construct($path, $params = null)
    {
        if ($params) {
            if ($params[0] === self::ADD_NEW_POST_ROUTE) {
                $path .= '.new';
                $this->articleForm = true;
            } else {
                $path .= '.view';
                $this->articleUrlKey = $params[0];
            }
        }
        $this->request = new Request();
        $this->postModel = App::getModel('post');
        $this->userModel = App::getModel('user');
        parent::__construct($path, $params);
    }

    /**
     * @throws App_Core_Exception
     */
    public function beforeRender()
    {
        $this->checkPostRequest();
        $this->setStylesheetPath('blog.css');

        if ($this->articleForm) {
            $this->setScript('post.js', Controller::FUNCTION_PATH, Controller::MODULE_TYPE);
        } else if ($this->articleUrlKey) {
            $this->article = $this->postModel->load($this->articleUrlKey, 'url_key');
        } else {
            $this->articles = $this->postModel->getCollection();
        }

        parent::beforeRender(); // TODO: Change the autogenerated stub
    }

    /**
     * Check post request
     * @throws App_Core_Exception
     */
    public function checkPostRequest()
    {
        if (!$this->request->isPost()) return;
        $ajaxObject = new Ajax($this->request->getPost());
        switch ($ajaxObject->getRequestType()) {
            case self::NEW_POST_REQUEST_TYPE:
                $datas = $ajaxObject->getRequestDatas();

                // Get user session
                $userSession = $this->userModel->getUserSession();
                if (!$userSession) {
                    $ajaxObject->error("Vous devez être connecté pour publier un article");
                    break;
                }

                /** @var PostModel $article */
                $article = $this->postModel->getEntity($this->postModel->_entityName, [
                    'title'         => $datas['title'],
                    'url_key'       => $datas['urlKey'],
                    'content'       => htmlspecialchars($datas['content']),
                    'author_id'     => $userSession->getId(),
                    'updated_at'    => time(),
                    'created_at'    => time()
                ]);

                $created = $this->postModel->create($article, $this->postModel->_tableName);
                $created ?
                    $ajaxObject->success("Votre article à bien été publier !") :
                    $ajaxObject->error("Une erreur c'est produite, veuillez réessayer");
        }
        $ajaxObject->sendResponse();
    }

}